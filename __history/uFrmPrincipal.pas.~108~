unit uFrmPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.Buttons, Vcl.StdCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, uDM, FileCtrl, Vcl.Grids, Vcl.DBGrids, Vcl.Imaging.pngimage,
  uFrmImagem, JPeg, ShellApi;

type
  TfrmPrincipal = class(TForm)
    pnlFundo: TPanel;
    pnlBotoes: TPanel;
    btnEnviarArquivo: TSpeedButton;
    edtTitulo: TEdit;
    lblNomeArquivo: TLabel;
    btnBaixarArquivo: TSpeedButton;
    grdArquivo: TDBGrid;
    dtsArquivos: TDataSource;
    qryPesquisaTabela: TFDQuery;
    procedure edtTituloKeyPress(Sender: TObject; var Key: Char);
    procedure btnEnviarArquivoClick(Sender: TObject);
    function geraHexArquivo: String;
    function selecionaArquivo: String;
    procedure btnBaixarArquivoClick(Sender: TObject);
    procedure lblNomeArquivoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    function HexStringToBin(HexStr: AnsiString): TMemoryStream;
    function BuscaArquivo(idArquivo: integer = 0): AnsiString;
    procedure FormShow(Sender: TObject);
    procedure grdArquivoCellClick(Column: TColumn);
    procedure FormShortCut(var Msg: TWMKey; var Handled: Boolean);
  private
    FArquivoSelecionado: String;
  public
    { Public declarations }
  end;

var
  frmPrincipal: TfrmPrincipal;

implementation

{$R *.dfm}

procedure TfrmPrincipal.btnEnviarArquivoClick(Sender: TObject);
var
  qryInserir: TFDQuery;
begin
  if trim(edtTitulo.Text) = '' then
    raise Exception.Create('Adicione um título!');
  if FArquivoSelecionado = '' then
    raise Exception.Create('Selecione ao menos um  arquivo!');
  qryInserir := TFDQuery.Create(nil);
  try
    qryInserir.Connection := DM.Connection;
    qryInserir.SQL.Add(' insert into arquivos values (default, :pTitulo, :pExtensao, :pArquivo) ');
    qryInserir.ParamByName('pTitulo').Value := edtTitulo.Text;
    qryInserir.ParamByName('pExtensao').Value := ExtractFileExt(FArquivoSelecionado);
    qryInserir.ParamByName('pArquivo').AsBlob := geraHexArquivo;
    qryInserir.ExecSQL;
  finally
    FreeAndNil(qryInserir);
  end;
  ShowMessage('Arquivo inserido com sucesso!');
  qryPesquisaTabela.Refresh;
end;

procedure TfrmPrincipal.edtTituloKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #$D then
    btnEnviarArquivoClick(Sender);
end;

procedure TfrmPrincipal.FormCreate(Sender: TObject);
begin
  FArquivoSelecionado := '';
end;

procedure TfrmPrincipal.FormShortCut(var Msg: TWMKey; var Handled: Boolean);
begin
 if msg.charcode = 116 then
   qryPesquisaTabela.Refresh;
end;

procedure TfrmPrincipal.FormShow(Sender: TObject);
begin
  qryPesquisaTabela.Connection := DM.Connection;
  qryPesquisaTabela.Open;
  ShowScrollBar (grdArquivo.Handle, SB_HORZ, FALSE);
end;

function TfrmPrincipal.geraHexArquivo: String;
  function StreamToHexStr(AStream: TStream): String;
  const
   HexArr: array[0..15] of char =
   ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');
  var
   AByte: Byte;
   i: Integer;
  begin
   SetLength(Result, AStream.Size * 2);
   AStream.Position := 0;
   for i := 0 to AStream.Size - 1 do
   begin
     AStream.ReadBuffer(AByte, SizeOf(AByte));
     Result[i * 2 + 1] := HexArr[AByte shr 4];
     Result[i * 2 + 2] := HexArr[AByte and $0F];
   end;
  end;
var
   Stream: TMemoryStream;
begin
  Stream := TMemoryStream.Create;
  try
    Stream.LoadFromFile(FArquivoSelecionado);
    Result := StreamToHexStr(Stream);
  finally
    Stream.Free;
  end;
end;

procedure TfrmPrincipal.grdArquivoCellClick(Column: TColumn);
begin
  edtTitulo.Text := qryPesquisaTabela.FieldByName('titulo').AsString;
end;

procedure TfrmPrincipal.lblNomeArquivoClick(Sender: TObject);
var
  Stream: TMemoryStream;
  FrmImagem: TFrmImagem;
begin
  FArquivoSelecionado := selecionaArquivo;
  if not(Trim(FArquivoSelecionado) = '') then
  begin
    if (UpperCase(ExtractFileExt(FArquivoSelecionado)) = '.PNG') or (UpperCase(ExtractFileExt(FArquivoSelecionado)) = '.JPG') or
       (UpperCase(ExtractFileExt(FArquivoSelecionado)) = '.JPEG') then
    begin
      FrmImagem := TFrmImagem.Create(nil);
      Stream := TMemoryStream.Create;
      try
        Stream.LoadFromFile(FArquivoSelecionado);
        FrmImagem.img.Picture.LoadFromStream(Stream);
        FrmImagem.img.Proportional := True;
        FrmImagem.img.Center := True;
        FrmImagem.lblAviso.Caption := 'Deseja salvar essa imagem?';;
        if not(FrmImagem.ShowModal = mrOk) then
        begin
          FArquivoSelecionado := '';
          lblNomeArquivo.Caption := 'Nenhum arquivo selecionado! Clique para selecionar!';
        end;
      finally
        FrmImagem.Free;
        FreeAndNil(Stream);
      end;
    end;
    if not(Trim(FArquivoSelecionado) = '') then
      lblNomeArquivo.Caption := FArquivoSelecionado;
  end
  else
    lblNomeArquivo.Caption := 'Nenhum arquivo selecionado! Clique para selecionar!';
end;

function TfrmPrincipal.selecionaArquivo: String;
var
  selectedFile: string;
  dlg: TOpenDialog;
begin
  selectedFile := '';
  dlg := TOpenDialog.Create(nil);
  try
    dlg.InitialDir := 'C:\';
    dlg.Filter := 'All files (*.*)|*.*';
    if dlg.Execute(Handle) then
      selectedFile := dlg.FileName;
  finally
    dlg.Free;
  end;

  if selectedFile <> '' then
    Result := selectedFile;
end;

function TfrmPrincipal.HexStringToBin(HexStr: AnsiString): TMemoryStream;
begin
  Result := TMemoryStream.Create;
  Result.Size := Length(HexStr) div 2;
  if Result.Size > 0 then
    HexToBin(PAnsiChar(HexStr), Result.Memory, Result.Size);
end;

function TfrmPrincipal.BuscaArquivo(idArquivo: integer): AnsiString;
var
  qryImagem: TFDQuery;
begin
  Result := '';
  qryImagem := TFDQuery.Create(nil);
  try
    qryImagem.Connection := DM.Connection;
    qryImagem.Sql.Add(' SELECT TITULO, ARQUIVO, EXTENSAO FROM ARQUIVOS ');
    if (trim(edtTitulo.Text) = '' ) and (idArquivo > 0) then
    begin
      qryImagem.Sql.Add(' WHERE ID_ARQUIVO = :pIdArquivo ');
      qryImagem.ParamByName('pIdArquivo').Value := idArquivo;
    end
    else
    begin
      if Trim(edtTitulo.Text) = '' then
        raise Exception.Create('Preencha o campo de busca!');
      qryImagem.Sql.Add(' WHERE TITULO ILIKE :pTitulo ');
      qryImagem.ParamByName('pTitulo').Value := '%' + edtTitulo.Text + '%';
    end;
    qryImagem.Open;
    qryImagem.First;
    if not(qryImagem.RecordCount > 0) then
      raise Exception.Create('Arquivo não encontrado!');
    Result :=  qryImagem.FieldByName('ARQUIVO').AsAnsiString;
    FArquivoSelecionado :=  qryImagem.FieldByName('TITULO').AsString + qryImagem.FieldByName('EXTENSAO').AsString;
  finally
    FreeAndNil(qryImagem);
  end;
end;

procedure TfrmPrincipal.btnBaixarArquivoClick(Sender: TObject);
var
  Stream: TMemoryStream;
  FrmImagem: TFrmImagem;
  Pdir: Pchar;
  function selecionaDir: String;
  var
    Dir: string;
  const
    SELDIRHELP = 1000;
  begin
    Dir := 'C:\';
    if SelectDirectory(Dir, [sdAllowCreate, sdPerformCreate, sdPrompt],SELDIRHELP) then
      Result := Dir
    else
      raise Exception.Create('Selecione ao menos um diretório!');
  end;

  procedure OpenPDF(aFile : TFileName; TypeForm : Integer = SW_NORMAL);
var
  Pdir: PChar;
begin
  GetMem(pDir, 256);
  StrPCopy(pDir, aFile);
  ShellExecute(0, nil, Pchar(aFile), nil, Pdir, TypeForm);
  FreeMem(pdir, 256);
end;

begin
  Stream := HexStringToBin(BuscaArquivo(qryPesquisaTabela.FieldByName('id_arquivo').AsInteger));
  try
    Stream.position := 0;
    if (UpperCase(ExtractFileExt(FArquivoSelecionado)) = '.PNG') or (UpperCase(ExtractFileExt(FArquivoSelecionado)) = '.JPG') or
       (UpperCase(ExtractFileExt(FArquivoSelecionado)) = '.JPEG') then
    begin
      FrmImagem := TFrmImagem.Create(nil);
      try
        FrmImagem.img.Picture.LoadFromStream(Stream);
        FrmImagem.img.Proportional := True;
        FrmImagem.img.Center := True;
        FrmImagem.lblAviso.caption := 'Deseja baixar essa imagem?';
        if not(FrmImagem.ShowModal = mrOk) then
        begin
          exit;
        end;
      finally
        FrmImagem.Free;
      end;
    end
    else
    if (UpperCase(ExtractFileExt(FArquivoSelecionado)) = '.PDF') then
    begin
      GetMem(pDir,256);
      StrPCopy(pDir, FArquivoSelecionado);
      ShellExecute(0, nil, pWideChar(FArquivoSelecionado), nil, Pdir, SW_NORMAL);
      FreeMem(pdir,256);
    end;

    Stream.SaveToFile(selecionaDir + '\' + FArquivoSelecionado);
  finally
    Stream.free;
  end;
  showmessage('Arquivo gravado com sucesso!');
  qryPesquisaTabela.Refresh;
end;

end.
